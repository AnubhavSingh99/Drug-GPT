
// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent for analyzing drug candidates using PubChem and Molprop.
 *
 * - analyzeDrugCandidate - A function that handles the drug candidate analysis process.
 * - AnalyzeDrugCandidateInput - The input type for the analyzeDrugCandidate function.
 * - AnalyzeDrugCandidateOutput - The return type for the analyzeDrugCandidate function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
import { getMoleculeBySmiles, type Molecule } from '@/services/pubchem';
import { getMolpropAnalysis, type MolpropResult } from '@/services/molprop'; // Import Molprop service

// Define input schema
const AnalyzeDrugCandidateInputSchema = z.object({
  smiles: z
    .string()
    .describe('The SMILES string of the drug candidate.'),
  targetProtein: z
    .string()
    .optional()
    .describe('The optional target protein for the analysis.'),
  query: z.string().describe('The analysis query from the user.'),
});
export type AnalyzeDrugCandidateInput = z.infer<typeof AnalyzeDrugCandidateInputSchema>;

// Define Molprop schema locally for tool/output consistency
const MolpropResultSchemaInternal = z.object({
    logP: z.number().optional().describe('Predicted LogP (lipophilicity). Higher values mean more lipophilic.'),
    solubility: z.number().optional().describe('Predicted aqueous solubility (e.g., logS). More negative values mean less soluble.'),
    toxicityScore: z.number().optional().describe('Predicted toxicity score (0-1). Higher values suggest higher potential toxicity.'),
    // Add other relevant properties consistent with your molprop service output
}).describe('Predicted molecular properties from Molprop.');


// Define the structured output schema - Including Molprop data
const AnalyzeDrugCandidateOutputSchema = z.object({
  synthesizedAnalysis: z.string().describe('The overall synthesized analysis addressing the user query, incorporating information from PubChem, Molprop (if used), and the LLM\'s internal knowledge.'),
  pubChemData: z.nullable(z.object({
      cid: z.number().describe('The PubChem CID (Compound Identifier).'),
      molecularFormula: z.string().describe('The molecular formula.'),
      iupacName: z.string().optional().describe('The IUPAC name, if available.'),
      canonicalSmiles: z.string().describe('The canonical SMILES string.'),
      molecularWeight: z.number().describe('The molecular weight.'),
  })).describe('Basic molecule information retrieved from PubChem.'),
  molpropData: z.nullable(MolpropResultSchemaInternal).describe('Prediction results from the Molprop analysis, if applicable.'),
});
export type AnalyzeDrugCandidateOutput = z.infer<typeof AnalyzeDrugCandidateOutputSchema>;


// Define tools
const pubChemTool = ai.defineTool({
  name: 'getMoleculeBySmiles',
  description: 'Retrieves basic molecule information (CID, formula, IUPAC name, canonical SMILES, molecular weight) from PubChem based on a SMILES string. Should be the first step for chemical data gathering.',
  inputSchema: z.object({
    smiles: z.string().describe('The SMILES string of the molecule to search for.'),
  }),
  outputSchema: z.object({
    cid: z.number().describe('The PubChem CID (Compound Identifier).'),
    molecularFormula: z.string().describe('The molecular formula.'),
    iupacName: z.string().optional().describe('The IUPAC name, if available.'),
    canonicalSmiles: z.string().describe('The canonical SMILES string.'),
    molecularWeight: z.number().describe('The molecular weight.'),
  }),
},
async input => {
  console.log(`PubChem Tool called with SMILES: ${input.smiles}`);
  const molecule = await getMoleculeBySmiles(input.smiles);
  if (!molecule) {
    console.error(`PubChem tool failed to retrieve molecule for SMILES: ${input.smiles}`);
    throw new Error(`PubChem tool execution failed: Could not retrieve molecule for SMILES: ${input.smiles}`);
  }
  console.log(`PubChem Tool successfully returned data for SMILES: ${input.smiles}`);
  return {
    cid: molecule.cid,
    molecularFormula: molecule.molecularFormula,
    iupacName: molecule.iupacName,
    canonicalSmiles: molecule.canonicalSmiles,
    molecularWeight: molecule.molecularWeight,
  };
});

// Define Molprop Tool
const molpropTool = ai.defineTool({
  name: 'getMolpropAnalysis',
  description: 'Predicts key molecular properties (like LogP, solubility, toxicity) for a given molecule based on its SMILES string using an AI model (Molprop). Use this after obtaining basic molecule info from PubChem, especially if the query asks about properties relevant to ADMET (Absorption, Distribution, Metabolism, Excretion, Toxicity) or general physicochemical characteristics.',
  inputSchema: z.object({
    smiles: z.string().describe('The SMILES string of the molecule to analyze with Molprop.'),
  }),
  outputSchema: z.nullable(MolpropResultSchemaInternal), // Use local schema, allow null
},
async input => {
  console.log(`Molprop Tool called with SMILES: ${input.smiles}`);
  const analysis = await getMolpropAnalysis(input.smiles); // Call the Molprop service function
   if (!analysis) {
     console.log(`Molprop tool did not generate prediction for SMILES: ${input.smiles}. Returning null.`);
     return null;
   }
    try {
        // Validate the structure before returning
        const validatedAnalysis = MolpropResultSchemaInternal.parse(analysis);
        console.log(`Molprop Tool successfully returned validated prediction for SMILES: ${input.smiles}`);
        return validatedAnalysis;
    } catch (validationError) {
        console.error(`Molprop tool returned data failed validation for SMILES ${input.smiles}:`, validationError, "Raw data:", analysis);
        return null;
    }
});


// Define the prompt - focus on generating the synthesized analysis text
const analysisPrompt = ai.definePrompt({
  name: 'analysisPrompt',
  tools: [pubChemTool, molpropTool], // Use molpropTool instead of deepPurposeTool
  input: {
    schema: z.object({
      smiles: z.string().describe('The canonical SMILES string of the drug candidate (from PubChem).'),
      targetProtein: z.string().optional().describe('The optional target protein for the analysis.'),
      query: z.string().describe('The analysis query from the user.'),
      pubChemData: z.object({
          cid: z.number().describe('The PubChem CID (Compound Identifier).'),
          molecularFormula: z.string().describe('The molecular formula.'),
          iupacName: z.string().optional().describe('The IUPAC name, if available.'),
          canonicalSmiles: z.string().describe('The canonical SMILES string.'),
          molecularWeight: z.number().describe('The molecular weight.'),
      }).describe('Basic molecule information from PubChem.'),
    }),
  },
  output: {
    schema: z.object({
      synthesizedAnalysis: z.string().describe('The comprehensive textual analysis of the drug candidate, synthesizing information from PubChem, Molprop (if used), and internal knowledge, directly addressing the user query.'),
    }),
  },
  // Updated prompt instructions for Molprop
  prompt: `You are an expert pharmaceutical researcher specializing in early-stage drug discovery analysis.

  A user has submitted a drug candidate for analysis.
  Canonical SMILES String: {{{smiles}}}
  {{#if targetProtein}}Target Protein: {{{targetProtein}}}{{/if}}
  User Query: {{{query}}}

  Available Data:
  - PubChem Data: You have been provided with basic chemical information (CID: {{pubChemData.cid}}, Formula: {{pubChemData.molecularFormula}}, IUPAC Name: {{#if pubChemData.iupacName}}{{pubChemData.iupacName}}{{else}}N/A{{/if}}, Mol Weight: {{pubChemData.molecularWeight}}).

  Available Tools:
  - 'getMolpropAnalysis': Predicts molecular properties (e.g., LogP, solubility, toxicity) based on SMILES.

  Instructions:
  1.  **Analyze PubChem Data & Internal Knowledge:** Review the provided PubChem data (especially the IUPAC name, if available) and the SMILES structure. Access your internal knowledge base about chemical compounds and drugs. Determine if this molecule is a known compound/drug. Include relevant information you know about it (e.g., common uses, indications, mechanism of action, known maximum clinical trial phase) in your analysis. If it's not a known compound or you lack specific information, state that clearly.
  2.  **Tool Strategy:** Based *only* on the user query "{{{query}}}", decide *if* you need to use the 'getMolpropAnalysis' tool. For example, use it if the query asks about physicochemical properties, ADMET characteristics (lipophilicity, solubility, potential toxicity), or drug-likeness. Do NOT use tools unnecessarily.
  3.  **Synthesize:** Generate a comprehensive textual analysis that directly answers the user's query: "{{{query}}}".
      *   Integrate findings from PubChem data, your internal knowledge, and the Molprop tool *only if you used it and it returned data*. Clearly state the source of information (e.g., "PubChem data indicates...", "Based on its structure and known compounds...", "Molprop predicts..."). Interpret the Molprop results in context (e.g., "A predicted LogP of X suggests moderate lipophilicity.").
      *   If Molprop returns no prediction or null, explicitly state that (e.g., "Molprop analysis did not yield a prediction."). Do not invent data.
      *   If a target protein ({{{targetProtein}}}) was provided, discuss the candidate's potential relevance to it, drawing connections from the available data (structure, properties, predicted properties, known information).
      *   If a tool fails due to an error during execution (which will be reported back to you), explicitly mention this limitation (e.g., "The Molprop tool failed execution.").
  4.  **Focus:** Your primary output is the single 'synthesizedAnalysis' text block. Do not output raw tool data here. The calling function handles gathering raw tool outputs.

  Return ONLY the final, synthesized analysis text.
`,
});

// Define the main flow function
const analyzeDrugCandidateFlow = ai.defineFlow<
  typeof AnalyzeDrugCandidateInputSchema,
  typeof AnalyzeDrugCandidateOutputSchema
>({
  name: 'analyzeDrugCandidateFlow',
  inputSchema: AnalyzeDrugCandidateInputSchema,
  outputSchema: AnalyzeDrugCandidateOutputSchema,
}, async (input) => {
  console.log('Starting analyzeDrugCandidateFlow with input:', JSON.stringify(input));

  let pubChemDataResult: Molecule | null = null;
  let molpropDataResult: MolpropResult | null = null; // Changed from DeepPurposeResult
  let synthesizedAnalysis = "Analysis could not be completed.";

  try {
    // Step 1: Fetch PubChem data using the TOOL.
    console.log(`Step 1: Calling PubChem tool for SMILES: ${input.smiles}`);
    const pubChemToolResult = await pubChemTool({ smiles: input.smiles });
    pubChemDataResult = pubChemToolResult;
    console.log('Step 1: PubChem tool executed successfully:', JSON.stringify(pubChemDataResult));

    // Prepare input for the main analysis prompt
    const llmInput = {
      smiles: pubChemDataResult.canonicalSmiles,
      targetProtein: input.targetProtein,
      query: input.query,
      pubChemData: pubChemDataResult,
    };
    console.log('Step 2: Calling analysisPrompt with LLM input:', JSON.stringify(llmInput));

    // Step 2: Call the main analysis prompt (which may call the Molprop tool)
    const promptResult = await analysisPrompt(llmInput);
    const llmOutput = promptResult.output;
    const history = promptResult.history;

    console.log('Step 2: analysisPrompt response received.');
    console.log('Prompt History:', JSON.stringify(history, null, 2));

    if (!llmOutput?.synthesizedAnalysis) {
        console.error('analyzeDrugCandidateFlow: Analysis prompt returned no synthesized analysis.');
        throw new Error('Analysis failed: The AI model did not generate the required analysis text.');
    }
    synthesizedAnalysis = llmOutput.synthesizedAnalysis;
    console.log('Step 2: Received synthesized analysis:', synthesizedAnalysis);

    // Step 3: Extract structured data (Molprop result) from the history if the tool was called
    console.log("Step 3: Extracting structured data from history...");
    if (history) {
      for (const event of history) {
        if (event.type === 'toolRequest' && event.toolRequest.name === 'getMolpropAnalysis' && event.toolRequest.toolResponse?.output) {
            const toolOutput = event.toolRequest.toolResponse.output;
            console.log(`Found successful tool response for 'getMolpropAnalysis':`, JSON.stringify(toolOutput));
            if (toolOutput != null) {
                try {
                    // Validate the structure before assigning
                    molpropDataResult = MolpropResultSchemaInternal.parse(toolOutput); // Use Molprop schema
                    console.log('analyzeDrugCandidateFlow: Successfully parsed Molprop data:', JSON.stringify(molpropDataResult));
                } catch (validationError) {
                    console.warn(`analyzeDrugCandidateFlow: Failed to validate Molprop tool output. Error:`, validationError, 'Raw Output:', toolOutput);
                    molpropDataResult = null;
                }
            } else {
                console.log(`Tool 'getMolpropAnalysis' returned null or undefined output.`);
                molpropDataResult = null;
            }
            break; // Assume only one call to Molprop per flow run
        } else if (event.type === 'toolRequest' && event.toolRequest.name === 'getMolpropAnalysis' && event.toolRequest.toolResponse?.error) {
           console.warn(`analyzeDrugCandidateFlow: Tool 'getMolpropAnalysis' execution failed with error:`, event.toolRequest.toolResponse.error);
            molpropDataResult = null;
            break;
        } else if (event.type === 'toolRequest' && event.toolRequest.name === 'getMolpropAnalysis' && !event.toolRequest.toolResponse) {
            console.warn(`analyzeDrugCandidateFlow: Tool request for 'getMolpropAnalysis' found in history, but no response recorded.`);
             molpropDataResult = null;
            break;
        }
      }
    } else {
        console.warn("analyzeDrugCandidateFlow: No history found for tool call extraction.");
    }
    console.log("Step 3: Finished extracting structured data. Molprop:", JSON.stringify(molpropDataResult));

    // Construct the final output
    const finalOutput: AnalyzeDrugCandidateOutput = {
      synthesizedAnalysis,
      pubChemData: pubChemDataResult,
      molpropData: molpropDataResult, // Include Molprop data
    };
    console.log("analyzeDrugCandidateFlow: Returning final output:", JSON.stringify(finalOutput));
    return finalOutput;

  } catch (error: any) {
    console.error('Error during analyzeDrugCandidateFlow execution:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    // Wrap error for clarity
    throw new Error(`Analysis Flow Error: ${errorMessage}`);
  }
});

// Exported wrapper function remains the same
export async function analyzeDrugCandidate(input: AnalyzeDrugCandidateInput): Promise<AnalyzeDrugCandidateOutput> {
  console.log('Calling analyzeDrugCandidate wrapper with input:', JSON.stringify(input));
  try {
    const result = await analyzeDrugCandidateFlow(input);
    console.log('analyzeDrugCandidate wrapper received result:', JSON.stringify(result));
    return result;
  } catch (error) {
     console.error('analyzeDrugCandidate wrapper caught error:', error);
     throw error; // Re-throw the error to be caught by the UI component
  }
}
