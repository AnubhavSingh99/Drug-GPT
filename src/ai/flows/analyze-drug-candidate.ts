// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent for analyzing drug candidates.
 *
 * - analyzeDrugCandidate - A function that handles the drug candidate analysis process.
 * - AnalyzeDrugCandidateInput - The input type for the analyzeDrugCandidate function.
 * - AnalyzeDrugCandidateOutput - The return type for the analyzeDrugCandidate function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
import { getMoleculeBySmiles, type Molecule } from '@/services/pubchem';
import { getDrugByName, type Drug, DrugSchema } from '@/services/drugbank'; // Import Drug type and schema
import { getDeepPurposeAnalysis, type DeepPurposeResult, DeepPurposeResultSchema } from '@/services/deeppurpose'; // Import DeepPurpose types and schema

// Define input schema (remains the same)
const AnalyzeDrugCandidateInputSchema = z.object({
  smiles: z
    .string()
    .describe('The SMILES string of the drug candidate.'),
  targetProtein: z
    .string()
    .optional()
    .describe('The optional target protein for the analysis.'),
  query: z.string().describe('The analysis query from the user.'),
});
export type AnalyzeDrugCandidateInput = z.infer<typeof AnalyzeDrugCandidateInputSchema>;


// Define the structured output schema
const AnalyzeDrugCandidateOutputSchema = z.object({
  synthesizedAnalysis: z.string().describe('The overall synthesized analysis addressing the user query, incorporating information from all relevant tools used.'),
  drugBankData: z.nullable(DrugSchema).describe('Information retrieved from DrugBank, if applicable.'),
  deepPurposeData: z.nullable(DeepPurposeResultSchema).describe('Prediction results from the DeepPurpose analysis.'),
  // We fetch PubChem data separately in the component now, so no need to return it from the flow.
  // pubChemData: z.nullable(PubChemSchema).describe('Information retrieved from PubChem.'),
});
export type AnalyzeDrugCandidateOutput = z.infer<typeof AnalyzeDrugCandidateOutputSchema>;


// Define tools (remain the same)
const pubChemTool = ai.defineTool({
  name: 'getMoleculeBySmiles',
  description: 'Retrieves basic molecule information (CID, formula, IUPAC name, canonical SMILES, molecular weight) from PubChem based on a SMILES string. Should be the first step for chemical data gathering.',
  inputSchema: z.object({
    smiles: z.string().describe('The SMILES string of the molecule to search for.'),
  }),
  // Output schema represents the *service* output, not the flow's final output
  outputSchema: z.object({
    cid: z.number().describe('The PubChem CID (Compound Identifier).'),
    molecularFormula: z.string().describe('The molecular formula.'),
    iupacName: z.string().optional().describe('The IUPAC name, if available.'),
    canonicalSmiles: z.string().describe('The canonical SMILES string.'),
    molecularWeight: z.number().describe('The molecular weight.'),
  }),
},
async input => {
  console.log(`PubChem Tool called with SMILES: ${input.smiles}`);
  const molecule = await getMoleculeBySmiles(input.smiles);
  if (!molecule) {
     // Tool should communicate failure to the LLM if possible.
     // Returning null might be interpreted as "not found" vs error.
     // Genkit usually surfaces errors from tools to the LLM. Throwing is appropriate.
    console.error(`PubChem tool failed to retrieve molecule for SMILES: ${input.smiles}`);
    throw new Error(`PubChem tool execution failed: Could not retrieve molecule for SMILES: ${input.smiles}`);
  }
  console.log(`PubChem Tool successfully returned data for SMILES: ${input.smiles}`);
  return molecule;
});

const drugBankTool = ai.defineTool({
  name: 'getDrugByName',
  description: 'Retrieves known drug information from DrugBank based on a drug name. Use this tool if the molecule identified by PubChem has an IUPAC name that suggests it might be a known drug, or if the user\'s query explicitly mentions a drug name.',
  inputSchema: z.object({
    drugName: z.string().describe('The name of the drug to search for in DrugBank.'),
  }),
  outputSchema: z.nullable(DrugSchema), // Allow null return from the tool itself
},
async input => {
  console.log(`DrugBank Tool called with Name: ${input.drugName}`);
  const drug = await getDrugByName(input.drugName);
  if (!drug) {
    console.log(`DrugBank tool did not find data for name: ${input.drugName}. Returning null.`);
    // Returning null is valid according to the outputSchema
    return null;
  }
  console.log(`DrugBank Tool successfully returned data for name: ${input.drugName}`);
  return drug;
});

const deepPurposeTool = ai.defineTool({
  name: 'getDeepPurposeAnalysis',
  description: 'Predicts the potential purpose or mechanism of action for a given molecule based on its SMILES string using an AI model (DeepPurpose). Use this after obtaining basic molecule info from PubChem to gain deeper insights into its function, especially if the query asks about potential use, mechanism, or targets.',
  inputSchema: z.object({
    smiles: z.string().describe('The SMILES string of the molecule to analyze with DeepPurpose.'),
  }),
  outputSchema: z.nullable(DeepPurposeResultSchema), // Allow null return
},
async input => {
  console.log(`DeepPurpose Tool called with SMILES: ${input.smiles}`);
  const analysis = await getDeepPurposeAnalysis(input.smiles);
   if (!analysis) {
     console.log(`DeepPurpose tool did not generate prediction for SMILES: ${input.smiles}. Returning null.`);
     // Returning null is valid according to the outputSchema
     return null;
   }
   console.log(`DeepPurpose Tool successfully returned prediction for SMILES: ${input.smiles}`);
  return analysis;
});


// Define the prompt - focus on generating the synthesized analysis text
const analysisPrompt = ai.definePrompt({
  name: 'analysisPrompt',
  tools: [pubChemTool, drugBankTool, deepPurposeTool],
  input: {
    schema: z.object({
      smiles: z.string().describe('The SMILES string of the drug candidate.'),
      targetProtein: z.string().optional().describe('The optional target protein for the analysis.'),
      query: z.string().describe('The analysis query from the user.'),
      pubChemName: z.string().optional().describe('IUPAC name from PubChem if found.'),
    }),
  },
  output: {
    // The prompt output focuses *only* on the synthesized text analysis
    schema: z.object({
      synthesizedAnalysis: z.string().describe('The comprehensive textual analysis of the drug candidate, synthesizing information from relevant tools used and addressing the user query.'),
    }),
  },
  prompt: `You are an expert pharmaceutical researcher specializing in early-stage drug discovery analysis.

  A user has submitted a drug candidate for analysis.
  SMILES String: {{{smiles}}}
  {{#if targetProtein}}Target Protein: {{{targetProtein}}}{{/if}}
  User Query: {{{query}}}

  Instructions:
  1.  **Foundation:** You have access to tools: 'getMoleculeBySmiles' (for basic chemical data), 'getDrugByName' (for known drug info), and 'getDeepPurposeAnalysis' (for functional prediction). Assume the essential 'getMoleculeBySmiles' has already been successfully called if an IUPAC name '{{pubChemName}}' is provided; otherwise, you *must* call it first. If it fails, report that limitation clearly.
  2.  **Tool Strategy:** Based on the user query "{{{query}}}" and the basic chemical data (especially the IUPAC name '{{pubChemName}}', if available), decide *if* you need to use 'getDrugByName' (e.g., if the name looks like a drug or the query asks about known drugs) and *if* you need 'getDeepPurposeAnalysis' (e.g., if the query asks about function, mechanism, or potential use). Use the tools *only* if relevant to the query.
  3.  **Synthesize:** Generate a comprehensive textual analysis that directly answers the user's query: "{{{query}}}".
      *   Integrate findings *only* from the tools you decided to use and that returned data successfully. Clearly state the source (e.g., "PubChem indicates...", "DrugBank suggests...", "DeepPurpose predicts...").
      *   If a tool returns no data (e.g., 'getDrugByName' finds no matching drug or returns null), explicitly state that in your analysis (e.g., "No information was found in DrugBank for this compound name."). Do not invent data.
      *   If a target protein ({{{targetProtein}}}) was provided, discuss the candidate's potential relevance to it, drawing connections from the available data (structure, properties, predicted purpose).
      *   If a tool fails due to an error during its execution (which will be reported back to you), explicitly mention this limitation in your analysis (e.g., "The PubChem tool failed to retrieve data.").
  4.  **Focus:** Your primary output is the single 'synthesizedAnalysis' text block. Do not output raw tool data in this text. The calling function will handle gathering the raw tool outputs separately.

  Return ONLY the final, synthesized analysis text.
`,
});

// Define the main flow function
const analyzeDrugCandidateFlow = ai.defineFlow<
  typeof AnalyzeDrugCandidateInputSchema,
  typeof AnalyzeDrugCandidateOutputSchema
>({
  name: 'analyzeDrugCandidateFlow',
  inputSchema: AnalyzeDrugCandidateInputSchema,
  outputSchema: AnalyzeDrugCandidateOutputSchema,
}, async (input) => {
  console.log('Starting analyzeDrugCandidateFlow with input:', JSON.stringify(input));

  let pubChemData: Molecule | null = null;
  let drugBankData: Drug | null = null;
  let deepPurposeData: DeepPurposeResult | null = null;
  let synthesizedAnalysis = "Analysis could not be completed."; // Default analysis

  try {
    // Step 1: Always get PubChem data first (critical for context)
    console.log(`Step 1: Fetching PubChem data for SMILES: ${input.smiles}`);
    pubChemData = await getMoleculeBySmiles(input.smiles);

    if (!pubChemData) {
      console.error(`analyzeDrugCandidateFlow: PubChem lookup failed for SMILES: ${input.smiles}. Aborting analysis.`);
      throw new Error(`Essential chemical data could not be retrieved from PubChem for SMILES: ${input.smiles}. Analysis cannot proceed.`);
    }
    console.log('Step 1: PubChem data fetched successfully:', JSON.stringify(pubChemData));

    // Step 2: Run the analysis prompt, providing PubChem name as context
    const llmInput = {
      ...input,
      smiles: pubChemData.canonicalSmiles, // Use canonical SMILES
      pubChemName: pubChemData.iupacName,
    };
    console.log('Step 2: Calling analysisPrompt with LLM input:', JSON.stringify(llmInput));

    // Call the prompt directly. Genkit handles tool execution and provides history.
    const promptResult = await analysisPrompt(llmInput);
    const llmOutput = promptResult.output;
    const history = promptResult.history; // Access history from the result

    console.log('Step 2: analysisPrompt response received.');
    // Log history for debugging tool calls
    console.log('Prompt History:', JSON.stringify(history, null, 2));


     if (!llmOutput?.synthesizedAnalysis) {
        console.error('analyzeDrugCandidateFlow: Analysis prompt returned no synthesized analysis.');
        throw new Error('Analysis failed: The AI model did not generate an analysis text.');
     }
     synthesizedAnalysis = llmOutput.synthesizedAnalysis;
     console.log('Step 2: Received synthesized analysis:', synthesizedAnalysis);

    // Step 3: Extract structured data from the LLM's tool calls in history
    console.log("Step 3: Extracting structured data from history...");
    if (history) {
      for (const event of history) {
         // Check for successful tool responses containing output
        if (event.type === 'toolRequest' && event.toolRequest.toolResponse && event.toolRequest.toolResponse.output) {
          const toolName = event.toolRequest.name;
          const toolOutput = event.toolRequest.toolResponse.output; // This is the actual data returned by the tool function
          console.log(`Found successful tool response for '${toolName}':`, JSON.stringify(toolOutput));

           // Important: Check if toolOutput is actually present and not null/undefined before parsing
           if (toolOutput != null) { // Check for both null and undefined
               if (toolName === 'getDrugByName') {
                 try {
                   // Validate the output against the schema.
                   drugBankData = DrugSchema.parse(toolOutput); // Parse the actual output
                   console.log('analyzeDrugCandidateFlow: Successfully parsed DrugBank data:', JSON.stringify(drugBankData));
                 } catch (validationError) {
                   console.warn(`analyzeDrugCandidateFlow: Failed to validate DrugBank tool output. Error:`, validationError, 'Raw Output:', toolOutput);
                   drugBankData = null; // Keep as null if validation fails
                 }
               } else if (toolName === 'getDeepPurposeAnalysis') {
                 try {
                   // Validate the output against the schema.
                   deepPurposeData = DeepPurposeResultSchema.parse(toolOutput); // Parse the actual output
                   console.log('analyzeDrugCandidateFlow: Successfully parsed DeepPurpose data:', JSON.stringify(deepPurposeData));
                 } catch (validationError) {
                   console.warn(`analyzeDrugCandidateFlow: Failed to validate DeepPurpose tool output. Error:`, validationError, 'Raw Output:', toolOutput);
                   deepPurposeData = null; // Keep as null if validation fails
                 }
               }
               // PubChem data is fetched initially, no need to extract from tool history unless verifying
           } else {
              console.log(`Tool '${toolName}' returned null or undefined output, skipping parsing.`);
               // Explicitly set corresponding data variable to null if the tool returned null
               if (toolName === 'getDrugByName') drugBankData = null;
               if (toolName === 'getDeepPurposeAnalysis') deepPurposeData = null;
           }
        } else if (event.type === 'toolRequest' && event.toolRequest.toolResponse?.error) {
             // Log if a tool call resulted in an error during execution
            console.warn(`analyzeDrugCandidateFlow: Tool '${event.toolRequest.name}' execution failed with error:`, event.toolRequest.toolResponse.error);
        } else if (event.type === 'toolRequest' && !event.toolRequest.toolResponse) {
             console.warn(`analyzeDrugCandidateFlow: Tool request for '${event.toolRequest.name}' found in history, but no response recorded.`);
        } else if (event.type !== 'toolRequest'){
             // console.log(`History Event: Type=${event.type}`); // Log other event types if needed
        }
      }
    } else {
        console.warn("analyzeDrugCandidateFlow: No history found for tool call extraction.");
    }
    console.log("Step 3: Finished extracting structured data. DrugBank:", JSON.stringify(drugBankData), "DeepPurpose:", JSON.stringify(deepPurposeData));

    // Return the combined structured output
    const finalOutput = {
      synthesizedAnalysis,
      drugBankData,
      deepPurposeData,
    };
    console.log("analyzeDrugCandidateFlow: Returning final output:", JSON.stringify(finalOutput));
    return finalOutput;

  } catch (error: any) {
    console.error('Error during analyzeDrugCandidateFlow execution:', error);
    // Ensure the error message is propagated correctly
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new Error(errorMessage); // Re-throw with a clear message
  }
});

// Export the wrapper function
export async function analyzeDrugCandidate(input: AnalyzeDrugCandidateInput): Promise<AnalyzeDrugCandidateOutput> {
  console.log('Calling analyzeDrugCandidate wrapper with input:', JSON.stringify(input));
  try {
    const result = await analyzeDrugCandidateFlow(input);
    console.log('analyzeDrugCandidate wrapper received result:', JSON.stringify(result));
    return result;
  } catch (error) {
     console.error('analyzeDrugCandidate wrapper caught error:', error);
     // Re-throw the error to be handled by the calling component
     throw error;
  }
}

    