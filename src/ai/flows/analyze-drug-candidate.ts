// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent for analyzing drug candidates.
 *
 * - analyzeDrugCandidate - A function that handles the drug candidate analysis process.
 * - AnalyzeDrugCandidateInput - The input type for the analyzeDrugCandidate function.
 * - AnalyzeDrugCandidateOutput - The return type for the analyzeDrugCandidate function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {getMoleculeBySmiles} from '@/services/pubchem';
import {getDrugByName} from '@/services/drugbank';

const AnalyzeDrugCandidateInputSchema = z.object({
  smiles: z
    .string()
    .describe('The SMILES string of the drug candidate.'),
  query: z.string().describe('The analysis query from the user.'),
});
export type AnalyzeDrugCandidateInput = z.infer<typeof AnalyzeDrugCandidateInputSchema>;

const AnalyzeDrugCandidateOutputSchema = z.object({
  analysis: z.string().describe('The analysis of the drug candidate.'),
});
export type AnalyzeDrugCandidateOutput = z.infer<typeof AnalyzeDrugCandidateOutputSchema>;

export async function analyzeDrugCandidate(input: AnalyzeDrugCandidateInput): Promise<AnalyzeDrugCandidateOutput> {
  return analyzeDrugCandidateFlow(input);
}

const pubChemTool = ai.defineTool({
  name: 'getMoleculeBySmiles',
  description: 'Retrieves molecule information from PubChem based on a SMILES string.',
  inputSchema: z.object({
    smiles: z.string().describe('The SMILES string of the molecule to search for.'),
  }),
  outputSchema: z.object({
    cid: z.number().describe('The PubChem CID (Compound Identifier).'),
    molecularFormula: z.string().describe('The molecular formula.'),
    iupacName: z.string().optional().describe('The IUPAC name, if available.'),
    canonicalSmiles: z.string().describe('The canonical SMILES string.'),
    molecularWeight: z.number().describe('The molecular weight.'),
  }),
},
async input => {
  const molecule = await getMoleculeBySmiles(input.smiles);
  if (!molecule) {
    throw new Error(`Molecule with SMILES ${input.smiles} not found in PubChem.`);
  }
  return molecule;
}
);

const drugBankTool = ai.defineTool({
  name: 'getDrugByName',
  description: 'Retrieves drug information from DrugBank based on the drug name.',
  inputSchema: z.object({
    drugName: z.string().describe('The name of the drug to search for.'),
  }),
  outputSchema: z.object({
    drugbankId: z.string().describe('The DrugBank ID.'),
    name: z.string().describe('The generic name of the drug.'),
    description: z.string().optional().describe('A brief description or indication of the drug\'s use.'),
    molecularFormula: z.string().optional().describe('The molecular formula.'),
    averageMolecularWeight: z.number().optional().describe('The average molecular weight.'),
  }),
},
async input => {
  const drug = await getDrugByName(input.drugName);
  if (!drug) {
    throw new Error(`Drug with name ${input.drugName} not found in DrugBank.`);
  }
  return drug;
}
);

const prompt = ai.definePrompt({
  name: 'analyzeDrugCandidatePrompt',
  tools: [pubChemTool, drugBankTool],
  input: {
    schema: z.object({
      smiles: z.string().describe('The SMILES string of the drug candidate.'),
      query: z.string().describe('The analysis query from the user.'),
    }),
  },
  output: {
    schema: z.object({
      analysis: z.string().describe('The analysis of the drug candidate.'),
    }),
  },
  prompt: `You are an expert pharmaceutical researcher.

  The user has provided the following SMILES string for a drug candidate: {{{smiles}}}.
  The user has the following query: {{{query}}}

  Use the available tools to research the drug candidate and answer the user's query. If the user mentions a specific drug name, use the drugBankTool to find information about it.

  Return a detailed analysis of the drug candidate based on the available information.
`,
});

const analyzeDrugCandidateFlow = ai.defineFlow<
  typeof AnalyzeDrugCandidateInputSchema,
  typeof AnalyzeDrugCandidateOutputSchema
>({
  name: 'analyzeDrugCandidateFlow',
  inputSchema: AnalyzeDrugCandidateInputSchema,
  outputSchema: AnalyzeDrugCandidateOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});

